{"ast":null,"code":"var _jsxFileName = \"/Users/Elish_1/Downloads/project6FS - Copy 2/my-project/src/js/ScreeningList.js\",\n  _s = $RefreshSig$();\n// ScreeningList.js\nimport SeatSelectionModal from \"./SeatSelectionModal\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../css/screeningList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ScreeningList(_ref) {\n  _s();\n  let {\n    selectedMovie\n  } = _ref;\n  const [screenings, setScreenings] = useState([]);\n  const [selectedScreening, setSelectedScreening] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  //const [selectedSeat, setSelectedSeat] = useState(null);\n\n  useEffect(() => {\n    // Fetch screenings for the selected movie from your API\n    const fetchScreenings = async () => {\n      try {\n        const response = await fetch(\"http://localhost:3001/api/stream\");\n        const data = await response.json();\n        const filteredScreenings = data.filter(screening => screening.movie_id === selectedMovie.id);\n        setScreenings(filteredScreenings);\n      } catch (error) {\n        console.log(\"Error occurred while fetching data:\", error);\n        // Additional error handling if needed\n      }\n    };\n\n    if (selectedMovie) {\n      fetchScreenings();\n    }\n  }, [selectedMovie]);\n  const handleSelectScreening = screening => {\n    setSelectedScreening(screening);\n  };\n\n  // const handleSelectSeat = (seat) => {\n  //   setSelectedSeat(seat);\n  //   openModal(); // Open the modal when seat is selected\n  // };\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trailer\",\n      children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n        //width=\"560\"\n        //height=\"315\"\n        src: `https://www.youtube.com/embed/${selectedMovie === null || selectedMovie === void 0 ? void 0 : selectedMovie.trailer_url}`,\n        title: \"Trailer\",\n        frameBorder: \"0\",\n        allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n        allowFullScreen: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: screenings.map(screening => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleSelectScreening(screening),\n        style: {\n          fontWeight: (selectedScreening === null || selectedScreening === void 0 ? void 0 : selectedScreening.id) === screening.id ? \"bold\" : \"normal\"\n        },\n        children: [screening.time, \" - Hall \", screening.hall_id]\n      }, screening.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), selectedScreening && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"order_button\",\n        onClick: openModal,\n        children: \"Order Ticket\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: /*#__PURE__*/_jsxDEV(SeatSelectionModal, {\n            selectedMovie: selectedMovie,\n            selectedScreening: selectedScreening,\n            closeModal: closeModal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(ScreeningList, \"TdrLX2uW7fRgbC4QtSBMZ1J+L7M=\");\n_c = ScreeningList;\nexport default ScreeningList;\nvar _c;\n$RefreshReg$(_c, \"ScreeningList\");","map":{"version":3,"names":["SeatSelectionModal","React","useState","useEffect","jsxDEV","_jsxDEV","ScreeningList","_ref","_s","selectedMovie","screenings","setScreenings","selectedScreening","setSelectedScreening","isModalOpen","setIsModalOpen","fetchScreenings","response","fetch","data","json","filteredScreenings","filter","screening","movie_id","id","error","console","log","handleSelectScreening","openModal","closeModal","children","className","src","trailer_url","title","frameBorder","allow","allowFullScreen","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","style","fontWeight","time","hall_id","_c","$RefreshReg$"],"sources":["/Users/Elish_1/Downloads/project6FS - Copy 2/my-project/src/js/ScreeningList.js"],"sourcesContent":["// ScreeningList.js\r\nimport SeatSelectionModal from \"./SeatSelectionModal\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"../css/screeningList.css\"; \r\n\r\nfunction ScreeningList({ selectedMovie }) {\r\n  const [screenings, setScreenings] = useState([]);\r\n  const [selectedScreening, setSelectedScreening] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  //const [selectedSeat, setSelectedSeat] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch screenings for the selected movie from your API\r\n    const fetchScreenings = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:3001/api/stream\");\r\n        const data = await response.json();\r\n        const filteredScreenings = data.filter(\r\n          (screening) => screening.movie_id === selectedMovie.id\r\n        );\r\n        setScreenings(filteredScreenings);\r\n      } catch (error) {\r\n        console.log(\"Error occurred while fetching data:\", error);\r\n        // Additional error handling if needed\r\n      }\r\n    };\r\n\r\n    if (selectedMovie) {\r\n      fetchScreenings();\r\n    }\r\n  }, [selectedMovie]);\r\n\r\n\r\n  \r\n  const handleSelectScreening = (screening) => {\r\n    setSelectedScreening(screening);\r\n  };\r\n\r\n  // const handleSelectSeat = (seat) => {\r\n  //   setSelectedSeat(seat);\r\n  //   openModal(); // Open the modal when seat is selected\r\n  // };\r\n\r\n  const openModal = () => {\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"trailer\">\r\n      <iframe \r\n        //width=\"560\"\r\n        //height=\"315\"\r\n        src={`https://www.youtube.com/embed/${selectedMovie?.trailer_url}`}\r\n        title=\"Trailer\"\r\n        frameBorder=\"0\"\r\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n        allowFullScreen\r\n      ></iframe>\r\n      </div>\r\n     \r\n      <ul>\r\n        {screenings.map((screening) => (\r\n          <li\r\n            key={screening.id}\r\n            onClick={() => handleSelectScreening(screening)}\r\n            style={{\r\n              fontWeight:\r\n                selectedScreening?.id === screening.id ? \"bold\" : \"normal\",\r\n            }}\r\n          >\r\n            {screening.time} - Hall {screening.hall_id}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {selectedScreening && (\r\n        <div>\r\n          <button className=\"order_button\" onClick={openModal}>\r\n            Order Ticket</button>\r\n          {/*Modal*/}\r\n          {isModalOpen && (\r\n            <div className=\"modal\">\r\n            <div className=\"modal-content\">\r\n              <SeatSelectionModal\r\n                selectedMovie={selectedMovie}\r\n                selectedScreening={selectedScreening}\r\n                closeModal={closeModal}\r\n              />\r\n            </div>\r\n          </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScreeningList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/Elish_1/Desktop/full stack/project7FullStack/my-project/src/js/Application.js\",\n  _s = $RefreshSig$();\n// Application.js\nimport React, { useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport MovieSelection from \"./MovieSelection\";\nimport ScreeningList from \"./ScreeningList\";\nimport \"../css/application.css\";\nimport ScreeningModal from \"./ScreeningModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Application() {\n  _s();\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  if (!user) {\n    // If user is not authenticated, navigate to login page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n  const handleOpenModal = movie => {\n    setSelectedMovie(movie); // Set the selected movie\n    setIsModalOpen(true); // Open the modal\n  };\n\n  const handleSelectMovie = movie => {\n    setSelectedMovie(movie);\n    handleOpenModal(movie);\n  };\n  const handleCloseModal = () => {\n    setSelectedMovie(null); // Reset selected movie\n    setIsModalOpen(false); // Close the modal\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"MyCinema\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), \" \\uD83C\\uDF9E\\uFE0F\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieSelection, {\n      onSelectMovie: handleSelectMovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScreeningModal, {\n      isOpen: isModalOpen,\n      onClose: handleCloseModal,\n      selectedMovie: selectedMovie,\n      user: user // Make sure to provide the user data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(Application, \"kksFbKLnrhqXVW2C/z6TdCEECf4=\");\n_c = Application;\nexport default Application;\nvar _c;\n$RefreshReg$(_c, \"Application\");","map":{"version":3,"names":["React","useState","Navigate","MovieSelection","ScreeningList","ScreeningModal","jsxDEV","_jsxDEV","Application","_s","user","JSON","parse","localStorage","getItem","selectedMovie","setSelectedMovie","isModalOpen","setIsModalOpen","to","fileName","_jsxFileName","lineNumber","columnNumber","handleOpenModal","movie","handleSelectMovie","handleCloseModal","children","className","onSelectMovie","isOpen","onClose","_c","$RefreshReg$"],"sources":["/Users/Elish_1/Desktop/full stack/project7FullStack/my-project/src/js/Application.js"],"sourcesContent":["// Application.js\nimport React, { useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport MovieSelection from \"./MovieSelection\";\nimport ScreeningList from \"./ScreeningList\";\nimport \"../css/application.css\"; \nimport ScreeningModal from \"./ScreeningModal\";\n\nfunction Application() {\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  if (!user) {\n    // If user is not authenticated, navigate to login page\n    return <Navigate to=\"/login\" />;\n  }\n  const handleOpenModal = (movie) => {\n    setSelectedMovie(movie); // Set the selected movie\n    setIsModalOpen(true); // Open the modal\n  };\n\n  const handleSelectMovie = (movie) => {\n    setSelectedMovie(movie);\n    handleOpenModal(movie);\n  };\n\n\n  const handleCloseModal = () => {\n    setSelectedMovie(null); // Reset selected movie\n    setIsModalOpen(false); // Close the modal\n  };\n\n  return (\n    <div>\n      {/* <h1 className=\"header\">üéûÔ∏è MyCinema üçø</h1> */}\n      <h1 className=\"header\">\n        <span>MyCinema</span> üéûÔ∏è\n      </h1>\n      <MovieSelection onSelectMovie={handleSelectMovie} />\n      {/* {selectedMovie \n      && <ScreeningList selectedMovie={selectedMovie} user={user} />} */}\n      {/* Render the ScreeningModal component */}\n      <ScreeningModal\n        isOpen={isModalOpen}\n        onClose={handleCloseModal}\n        selectedMovie={selectedMovie}\n        user={user} // Make sure to provide the user data\n      />\n    </div>\n  );\n}\n\nexport default Application;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAO,wBAAwB;AAC/B,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;EACrD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAErD,IAAI,CAACS,IAAI,EAAE;IACT;IACA,oBAAOH,OAAA,CAACL,QAAQ;MAACiB,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;EACA,MAAMC,eAAe,GAAIC,KAAK,IAAK;IACjCT,gBAAgB,CAACS,KAAK,CAAC,CAAC,CAAC;IACzBP,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;EACxB,CAAC;;EAED,MAAMQ,iBAAiB,GAAID,KAAK,IAAK;IACnCT,gBAAgB,CAACS,KAAK,CAAC;IACvBD,eAAe,CAACC,KAAK,CAAC;EACxB,CAAC;EAGD,MAAME,gBAAgB,GAAGA,CAAA,KAAM;IAC7BX,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IACxBE,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;EACzB,CAAC;;EAED,oBACEX,OAAA;IAAAqB,QAAA,gBAEErB,OAAA;MAAIsB,SAAS,EAAC,QAAQ;MAAAD,QAAA,gBACpBrB,OAAA;QAAAqB,QAAA,EAAM;MAAQ;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,uBACvB;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLhB,OAAA,CAACJ,cAAc;MAAC2B,aAAa,EAAEJ;IAAkB;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAIpDhB,OAAA,CAACF,cAAc;MACb0B,MAAM,EAAEd,WAAY;MACpBe,OAAO,EAAEL,gBAAiB;MAC1BZ,aAAa,EAAEA,aAAc;MAC7BL,IAAI,EAAEA,IAAK,CAAC;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACd,EAAA,CA3CQD,WAAW;AAAAyB,EAAA,GAAXzB,WAAW;AA6CpB,eAAeA,WAAW;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}